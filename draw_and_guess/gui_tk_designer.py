# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Button, Label, Toplevel, messagebox
import random
import string
from vocabulary import Vocabulary


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = Path(r"/Users/wu/Downloads/Tkinter-Designer-1.0.7/build/assets/frame0")
CHARACTERS = string.ascii_letters + string.digits


def relative_to_assets(path: str) -> Path:
    print(path, ASSETS_PATH / Path(path))
    return ASSETS_PATH / Path(path)


class MyGUI:
    def __init__(self, vocabulary, seed=None, v_seed_len=6, duration=3):
        self.root = Tk()
        self.root.title("Main Window")
        self.root.geometry("700x420")
        self.root.configure(bg="#FFFFFF")

        self.seed = seed
        self.v_seed = None
        self.vocabulary = vocabulary
        self.selected = self.vocabulary.select_words()
        random.seed(seed)

        self.duration = duration
        self.v_seed_len = v_seed_len
        self.shuffle_index = list(range(self.vocabulary.n))

        self.word_window = None

        self.create_main_window()

    def create_main_window(self):
        canvas = Canvas(
            self.root,
            bg="#FFFFFF",
            height=421,
            width=699,
            bd=0,
            highlightthickness=0,
            relief="ridge"
        )

        canvas.place(x=0, y=0)
        canvas.create_text(
            125.0,
            20,
            anchor="nw",
            text="Draw and Guess",
            fill="#000000",
            font=("Inter", 66 * -1)
        )

        # entry_image_1 = PhotoImage(
        #     file=relative_to_assets("entry_private.png"))
        # entry_bg_1 = canvas.create_image(
        #     339.5,
        #     249.0,
        #     image=entry_image_1
        # )
        self.entry_private = Entry(
        )
        self.entry_private.place(
            x=242.0,
            y=150.0,
            width=195.0,
            height=48.0
        )
        # entry_private.insert(0, "Vocabulary seed...")

        canvas.create_text(
            88.0,
            150.0,
            anchor="nw",
            text="Private Seed",
            fill="#000000",
            font=("Inter Medium", 24 * -1)
        )

        self.entry_common = Entry()
        self.entry_common.place(
            x=242.0,
            y=220.0,
            width=195.0,
            height=48.0
        )
        # entry_private.insert(0, "Vocabulary seed...")

        canvas.create_text(
            80.0,
            220.0,
            anchor="nw",
            text="Common Seed",
            fill="#000000",
            font=("Inter Medium", 24 * -1)
        )

        # button_image_1 = PhotoImage(
        #     file=relative_to_assets("button_1.png"))
        self.button_rest = Button(
            # image=button_image_1,
            bg="black",
            text="Set v_seed",
            borderwidth=0,
            # highlightthickness=0,
            command=self.reset,
            # relief="flat"
        )
        self.button_rest.place(
            x=467.0,
            y=220.0,
            width=145.0,
            height=50.0
        )

        self.seed_label = Label(self.root, text=f"Current vocabulary: {self.vocabulary.seed}", font=("Arial", 12), wraplength=120)
        self.seed_label.place(
            x=450.0,
            y=330.0,
            width=150,
            height=62.52702331542969)

        # button_image_1 = PhotoImage(
        #     file=relative_to_assets("button_1.png"))
        self.button_draw = Button(
            # image=button_image_1,
            bg="black",
            text="Draw",
            borderwidth=0,
            # highlightthickness=0,
            command=self.draw,
            # relief="flat"
        )
        self.button_draw.place(
            x=250.0,
            y=330.0,
            width=179.0,
            height=62.52702331542969
        )

        # button_image_2 = PhotoImage(
        #     file=relative_to_assets("button_2.png"))
        self.button_2 = Button(
            # image=button_image_2,
            bg="blue",
            text="Generate",
            font=40,
            borderwidth=0,
            # highlightthickness=0,
            command=self.generate_vocabulary_seed,
            # relief="flat"
        )
        self.button_2.place(
            x=467.0,
            y=150.0,
            width=145.0,
            height=50.0
        )

        self.root.protocol("WM_DELETE_WINDOW", self.on_root_window_close)

    def generate_vocabulary_seed(self):
        self.v_seed = ''.join(random.choice(CHARACTERS) for _ in range(self.v_seed_len))
        self.entry_private.delete(0, "end")
        self.entry_private.insert(0, self.v_seed)
        # print(self.entry_private.get())

    def reset(self):
        seed = self.entry_common.get()
        if not seed:
            messagebox.showwarning("Warning", "Please enter a common seed.")
        else:
            self.vocabulary.set_seed(seed)
            # print(self.vocabulary.seed)
            self.selected = self.vocabulary.select_words()
            self.seed_label.config(text=f"Current vocabulary: {self.vocabulary.seed}")
        # print(self.selected)

    def extract_words(self):
        words = []
        for i in range(len(self.selected)):
            words.append(self.selected[i]["ci"])
        return words

    def draw(self):
        # print(self.selected)
        self.shuffle_vocabulary()
        # Hide main window
        self.root.withdraw()
        # Create word wind
        if self.word_window is None:
            self.create_word_window()
        else:
            self.init_word_window()
            self.word_window.deiconify()
        # Show vocabulary
        self.show_word()
        self.update_timer()

    def show_word(self):
        if self.index < len(self.selected):
            self.word_label1.config(text=self.selected[self.shuffle_index[self.index]]['ci'], wraplength=300)
            self.word_label2.config(text=self.selected[self.shuffle_index[self.index]]['explanation'], wraplength=300)
            self.index += 1
            self.remain_time = self.duration
            self.word_window.after(self.duration * 1000, self.show_word)
        else:
            self.word_label1.config(text=self.shuffle_index)
            self.word_label2.config(text="")
            self.timer_label.config(text="")
            self.create_results_window()
            # messagebox.showinfo("Vocabulary List", "\n".join(words))

    def update_timer(self):
        if self.remain_time > 0:
            self.remain_time -= 1
            self.timer_label.config(text=f"{self.remain_time:02}")
            self.word_window.after(1000, self.update_timer)
        else:
            self.timer_label.config(text="")
            # self.timer_label.config(text="Time's up!")

    def shuffle_vocabulary(self):
        # Shuffle vocabulary
        random.seed(self.v_seed)
        random.shuffle(self.shuffle_index)

    def create_word_window(self):
        self.word_window = Toplevel(self.root)
        self.word_window.title("Words")
        self.word_window.geometry("400x300")

        # Timer label
        self.timer_label = Label(self.word_window, text="", font=("Arial", 12))
        self.timer_label.pack(anchor="ne")

        # Create two labels for displaying words
        self.word_label1 = Label(self.word_window, text="", font=("Arial", 30))
        self.word_label1.pack(fill="y", expand=True)

        self.word_label2 = Label(self.word_window, text="", font=("Arial", 12))
        self.word_label2.pack()

        self.word_window.protocol("WM_DELETE_WINDOW", self.on_word_window_close)

        # Init current index
        self.index = 0
        # Remain time
        self.remain_time = self.duration

    def create_results_window(self):
        self.results_window = Toplevel(self.root)
        self.results_window.title("Vocabulary List")

        label = Label(self.results_window, text="Vocabulary List")
        label.pack()

        words = self.extract_words()
        for word in words:
            word_label = Label(self.results_window, text=word)
            word_label.pack()

    def init_word_window(self):
        self.word_label1.config(text="")
        self.word_label2.config(text="")
        self.timer_label.config(text="")
        self.index = 0
        self.remain_time = self.duration

    def on_word_window_close(self):
        self.word_window.withdraw()
        self.root.deiconify()

    def on_root_window_close(self):
        if self.word_window is not None:
            self.word_window.destroy()
        self.root.destroy()

    def run(self):
        self.root.mainloop()


if __name__ == "__main__":
    v = Vocabulary()
    my_gui = MyGUI(v)
    my_gui.run()
